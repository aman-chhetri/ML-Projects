# -*- coding: utf-8 -*-
"""Rock vs Mine Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-j4yu_Gb6ZR6ZQVz9cJliTMGSVGirfm-

**Rock vs Mine Prediction using ML** - *Logistic Regression Model*

1. Importing the neccesary dependencies.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

"""2. Data Collection and Data Processing"""

# Loading dataset to Pandas DataFrame
sonar_data= pd.read_csv('/content/sonar_data.csv',header=None)

# In our dataset(.csv file) , No any header names so we put header as None

# Displaying first 5 rows of dataset
sonar_data.head()

# Number of Rows and Columns
sonar_data.shape

# Displaying Statistical Measure of Data
sonar_data.describe()

# Rock and Mine are specified in 60th column so we take sonar_data[60]
sonar_data[60].value_counts()

"""Here in this sonar dataset:

M -> Mine

R -> Rock
"""

# Looking at Mean value of both Mine and Rock at each column
sonar_data.groupby(60).mean()

# Separating Data and Labels
X = sonar_data.drop(columns=60, axis=1)
Y = sonar_data[60]

# Printing X and Y
print(X)
print(Y)

"""3. Training and Test Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1, stratify = Y, random_state = 1)

print(X.shape, X_train.shape, X_test.shape)

print(X_train)
print(Y_train)

"""4. Model Training --> Logistic Regression"""

model = LogisticRegression()

# Training the Logistic Regression model with training data
model.fit(X_train,Y_train)

"""5. Model Evaluation"""

# Accuracy on Training Data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)
print('Accuracy on Training Data: ',training_data_accuracy)

# Note: In most cases, accuracy of training data will be more because model has already seen the training data.

# Accuracy on Testing Data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)
print('Accuracy on Test Data: ',test_data_accuracy)

"""6. Making a Predictive System"""

input_data = (0.0116,0.0744,0.0367,0.0225,0.0076,0.0545,0.1110,0.1069,0.1708,0.2271,0.3171,0.2882,0.2657,0.2307,0.1889,0.1791,0.2298,0.3715,0.6223,0.7260,0.7934,0.8045,0.8067,0.9173,0.9327,0.9562,1.0000,0.9818,0.8684,0.6381,0.3997,0.3242,0.2835,0.2413,0.2321,0.1260,0.0693,0.0701,0.1439,0.1475,0.0438,0.0469,0.1476,0.1742,0.1555,0.1651,0.1181,0.0720,0.0321,0.0056,0.0202,0.0141,0.0103,0.0100,0.0034,0.0026,0.0037,0.0044,0.0057,0.0035)

# Changing the input data into a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# Reshape the np array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# Note: Here (1,-1) represents that we have one instance and we are predicting for that only.

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0] == 'R'):
  print('The Object is a Rock.')
else:
  print('The Object is a Mine.')

# Generating the Classification Report
print(classification_report(Y, model.predict(X)))

"""Resources: *To learn about Logistic Regression, look at this article on*

https://realpython.com/logistic-regression-python/
"""

